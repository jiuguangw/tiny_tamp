[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools", "setuptools_scm"]

[project]
authors = [
  {name = "Aidan Curtis", email = "curtisa@mit.edu"}
]
dependencies = [
  "pybullet==3.2.6",
  "scipy",
  "zmq",
  "numpy==1.24.4",
  "trimesh",
  "black==23.9.1",
  "docformatter==1.7.5",
  "isort==5.12.0"
]
description = "tiny_tamp."
license = {file = "LICENSE"}
name = "tiny_tamp"
readme = "README.md"
requires-python = ">=3.8"
version = "0.1.0"

[project.optional-dependencies]
dev = [
  "pre-commit>=3.5.0"
]

[tool.black]
# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = """
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
  pybullet_planning
)
"""
line-length = 88
target-version = ["py38"]

[tool.isort]
multi_line_output = 2
profile = "black"
py_version = 38
skip_glob = ["venv/*", "pybullet_planning/*"]
split_on_trailing_comma = true

[tool.mypy]
disallow_untyped_calls = true
exclude = ["venv/*", "pybullet_planning/*"]
follow_imports = "skip"
strict_equality = true
warn_unreachable = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "setuptools.*",
  "bosdyn.*",
  "cv2.*",
  "open3d.*"
]

[tool.pytest.ini_options]
addopts = "--ignore=pybullet_planning"

[tool.ruff]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv"
]
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
ignore = ["D", "PLR2004", "T201", "S101"]
# Same as Black.
line-length = 88
# Allow autofix for all enabled rules (when `--fix`) is provided.
# Enable pycodestyle (`E`), Pyflakes (`F`), and import sorting (`I`)
select = [
  "E",  # https://docs.astral.sh/ruff/rules/#error-e
  "W",  # https://docs.astral.sh/ruff/rules/#warning-w
  "F",  # https://docs.astral.sh/ruff/rules/#pyflakes-f
  "I",  # https://docs.astral.sh/ruff/rules/#isort-i
  "B",  # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
  "SLF001",  # https://docs.astral.sh/ruff/rules/#flake8-self-slf
  "RET501",
  "RET502",
  "RET503",  # https://docs.astral.sh/ruff/rules/#flake8-return-ret
  "RUF",  # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
  "PLC",
  "PLE",
  "PLW",  # https://docs.astral.sh/ruff/rules/#pylint-pl
  "PIE",  # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
  "FLY"  # https://docs.astral.sh/ruff/rules/#flynt-fly
]
# Assume Python 3.10.
target-version = "py38"
unfixable = []

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.setuptools]
packages = ["tiny_tamp", "models"]
